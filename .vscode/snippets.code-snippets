{
  // Place your big-apple-roll workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Component": {
    "scope": "typescriptreact",
    "prefix": "component",
    "body": [
      "import React from 'react';",
      "import * as classNames from 'src/components/${TM_FILENAME_BASE}.module.css';",
      "",
      "type Props = {};",
      "",
      "export default function ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/}(props: Props): React.JSX.Element | null {",
      "  return <div className={classNames.${TM_FILENAME_BASE}}></div>;",
      "}",
    ],
  },
  "Fragment": {
    "scope": "typescript",
    "prefix": "fragment",
    "body": [
      "import { graphql } from 'gatsby';",
      "",
      "export const ${TM_FILENAME_BASE} = graphql`",
      "  fragment ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/} on MarkdownRemark {",
      "    id",
      "    fileName",
      "    fileRelativeDirectory",
      "    frontmatter {",
      "    }",
      "    html",
      "    linkedFiles {",
      "      ...ImageFragment",
      "    }",
      "  }",
      "`;",
    ],
  },
  "Page": {
    "scope": "typescriptreact",
    "prefix": "page",
    "body": [
      "import React from 'react';",
      "import { graphql, useStaticQuery } from 'gatsby';",
      "",
      "import * as classNames from 'src/pages/${TM_FILENAME_BASE}.module.css';",
      "import HeadLayout from 'src/components/layouts/headLayout';",
      "",
      "export default function ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/}(): React.JSX.Element {",
      "  const data = useStaticQuery<Queries.${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/}Query>(graphql`",
      "    query ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/} {",
      "    }",
      "  `);",
      "",
      "  return <div className={classNames.${TM_FILENAME_BASE}}></div>;",
      "}",
      "",
      "export function Head(): React.JSX.Element {",
      "  return <HeadLayout pageTitle='' />;",
      "}",
    ],
  },
  "Template": {
    "scope": "typescriptreact",
    "prefix": "template",
    "body": [
      "import { graphql, PageProps } from 'gatsby';",
      "import React from 'react';",
      "",
      "import * as classNames from 'src/templates/${TM_FILENAME_BASE}.module.css';",
      "import HeadLayout from 'src/components/layouts/headLayout';",
      "",
      "export type ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/}Context = {};",
      "",
      "export const query = graphql`",
      "  query ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/}(",
      "  ) {",
      "  }",
      "`;",
      "",
      "export default function ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/}(",
      "  props: PageProps<Queries.${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/}Query, ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/}Context>,",
      "): React.JSX.Element {",
      "  const { data } = props;",
      "",
      "  return <div className={classNames.${TM_FILENAME_BASE}}></div>;",
      "}",
      "",
      "export function Head(",
      "  props: PageProps<Queries.${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/}Query, ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}$2/}Context>,",
      "): React.JSX.Element {",
      "  return <HeadLayout pageTitle='' />;",
      "}",
    ],
  },
}
